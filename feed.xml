<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://chenxiangtech.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://chenxiangtech.github.io/" rel="alternate" type="text/html" /><updated>2020-08-02T22:50:14+01:00</updated><id>https://chenxiangtech.github.io/feed.xml</id><title type="html">Continuous Learning and Sharing</title><subtitle>A blog site for continuous learning and sharing.</subtitle><author><name>Xiang Chen</name></author><entry><title type="html">Design Pattern 1 Singleton</title><link href="https://chenxiangtech.github.io/Design-Pattern-1-Singleton/" rel="alternate" type="text/html" title="Design Pattern 1 Singleton" /><published>2020-08-01T00:00:00+01:00</published><updated>2020-08-01T00:00:00+01:00</updated><id>https://chenxiangtech.github.io/Design-Pattern-1-Singleton</id><content type="html" xml:base="https://chenxiangtech.github.io/Design-Pattern-1-Singleton/">&lt;p&gt;&lt;strong&gt;Singleton&lt;/strong&gt; probably is the most referred, and seen design pattern.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summarized in one sentence, there will one and only one initialized instance in the runtime environment.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There will be only one initialized object in the memory, obviously this will save memory space.&lt;/p&gt;

&lt;p&gt;On top of that, in the scenario where initialization is very costly, such as IO operations like estabilish DB connection, or CPU comsumption such as costly computing operation, Singleton will be a very useful design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Catch or Cons&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because this single instance is shared by multiple functions, consideration need to put towards:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Does the function depend on the state of the object?&lt;/li&gt;
  &lt;li&gt;Is the object safe to be used in a multithread environment?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further more, if the developer wants to use lazy load, then the consideration of concurrency is very important.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If I find a a good candidate when I conducted a techincal interview, I’d like to ask him or her to implement a Singleton from scratch, as it’s testing some basic Java knowledge such a private constructor, or you can dig deeper towards multithreading such as synchoronized and volatile etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is an example with basic implementation:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// Private constructor makes sure it cannot be instantiated anywhere else&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;//Lazy loading&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_instance&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There will be problems if the code above is running in multi-threading environments.&lt;/p&gt;

&lt;p&gt;So Double Checked Locking is introduce:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* The usage of volatile:
   1. Provide Data visiblity between threads;
   2. When CPU executes the instructions, JVM will utilize memory fence around this object and making sure there is no reordering of instructions which may lead to partially initizliaed object.
   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Double Checked Locking&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1. Check if it's initialized, no need to synchrozied at this step&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2. After obtaining the lock, check again, and make sure it's not initizlied by other thread in between the previous steps.&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are other ways to implementation on this, but I think the most important thing is the concept of this pattern.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Singleton in Action with the Spring framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the Spring framework, there is a core container called the Inversion of Control.&lt;/p&gt;

&lt;p&gt;By default, a bean managed by the container is instantiated as a singleton instance, if not specified otherwise.&lt;/p&gt;

&lt;p&gt;IoC takes over the management of initilization of these objects, called beans, from the implementation classes.&lt;/p&gt;

&lt;p&gt;In this way, it decouples the implemenation from the detailed initilization, and focus on Interface Oriented Implementation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;A few more thoughts&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;I once interviewed a senior developer who has years of experience working on Spring framework. When I asked about implementing a class of Singleton pattern from scratch just like above, he/she stucked and kept mentioning that Spring is using singleton that will feed them beans as singleton on the fly, and he/she doesn’t need to implement it. This actually just remind me that when I’ve been working on top of a certain framework for so long, that I’m in my comfort zone and quite easily getting into the habit of not thinking how it was implemented under the hood, and this is definitely not helpful for the professional growth.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Xiang Chen</name></author><summary type="html">Singleton probably is the most referred, and seen design pattern.</summary></entry><entry><title type="html">The 23 Gang Of Four Design Patterns</title><link href="https://chenxiangtech.github.io/The-23-Gang-of-Four-Design-Patterns/" rel="alternate" type="text/html" title="The 23 Gang Of Four Design Patterns" /><published>2020-07-22T00:00:00+01:00</published><updated>2020-07-22T00:00:00+01:00</updated><id>https://chenxiangtech.github.io/The-23-Gang-of-Four-Design-Patterns</id><content type="html" xml:base="https://chenxiangtech.github.io/The-23-Gang-of-Four-Design-Patterns/">&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Work In Progress&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The 23 Gang of Four Design Patterns have been refered as must known for every technical professional.&lt;/p&gt;

&lt;p&gt;I’m going to document my understanding on these patterns, as I notice that for some of them there might be different interpretations which all make good sense.&lt;/p&gt;

&lt;p&gt;So the goal is not to resolve the differences, but to gain a good knowledge from a common and high level.&lt;/p&gt;

&lt;p&gt;This is not a purely academic article, that I’m also adding some notes or thoughts along the way, so be alerted if you are just looking for a wiki.&lt;/p&gt;

&lt;p&gt;I’m also sharing some tips about how I memorises these patterns, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABCD+PFF&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2*MISC + VOT&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;creational-design-pattern&quot;&gt;Creational Design Pattern&lt;/h1&gt;

&lt;p&gt;There are five of them:&lt;/p&gt;

&lt;h2 id=&quot;singleton&quot;&gt;Singleton&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Create one and only one instance&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Singleton&lt;/strong&gt; probably is the most referred, implemented or discussed design pattern.&lt;/p&gt;

&lt;p&gt;If I find a a good candidate in my interview, I’d like to ask him or her to implement a Singleton from scratch, as it’s testing some basic Java knowledge such a private constructor, or you can dig deeper towards multithreading such as synchoronized and volatile etc.&lt;/p&gt;

&lt;p&gt;Here is an example with basic implementation:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// Private constructor makes sure it cannot be instantiated anywhere else&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;//Lazy loading&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_instance&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There will be problems if the code above is running in multi-threading environments.&lt;/p&gt;

&lt;p&gt;So Double Checked Locking is introduce:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* The usage of volatile:
   1. Provide Data visiblity between threads;
   2. When CPU executes the instructions, JVM will utilize memory fence around this object and making sure there is no reordering of instructions which may lead to partially initizliaed object.
   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Double Checked Locking&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1. Check if it's initialized, no need to synchrozied at this step&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2. After obtaining the lock, check again, and make sure it's not initizlied by other thread in between the previous steps.&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are other implementations on this, but I probably will just summarize that the purpose of singleton is to make sure only one instance of an object exists in the run time system, to save resource.&lt;/p&gt;

&lt;p&gt;Some example of usage in the real life:&lt;/p&gt;

&lt;p&gt;In the Spring framework, there is a famous container called the Inversion of Control.&lt;/p&gt;

&lt;p&gt;By default, a bean managed by the container is instantiated as a singleton instance, if not specified otherwise.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;A side note&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;I once interviewed a senior developer who has years of experience working on Spring framework. When I asked about implementing a class of Singleton pattern from scratch just like above, he/she stucked and kept mentioning that Spring is using singleton that will feed them beans as singleton on the fly, and he/she doesn’t need to implement it. This actually just remind me that when I’ve been working on top of a certain framework for so long, that I’m in my comfort zone and quite easily getting into the habit of not thinking how it was implemented under the hood, and this is definitely not helpful for the professional growth.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;factory&quot;&gt;Factory&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Create an abstract object, without knowing the details or hard coding if/else.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;abstract-factory&quot;&gt;Abstract Factory&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Create a group/family of abstract objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;builder&quot;&gt;Builder&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Create an object with lots of arguments.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;prototype&quot;&gt;Prototype&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Create an object by copying an existing instance, usually when the cost is high.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;structural-design-pattern&quot;&gt;Structural Design Pattern&lt;/h1&gt;

&lt;p&gt;There are seven of them, to memorize, remember &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABCD + PFF&lt;/code&gt;:&lt;/p&gt;

&lt;h2 id=&quot;adapter&quot;&gt;Adapter&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Wrap the existing function, adpat/convert and meet a specific API requirement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;bridge&quot;&gt;Bridge&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Decouple Abstraction and Implementation, so that they can be modified independently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;composite&quot;&gt;Composite&lt;/h2&gt;

&lt;h2 id=&quot;decorator&quot;&gt;Decorator&lt;/h2&gt;

&lt;h2 id=&quot;proxy&quot;&gt;Proxy&lt;/h2&gt;

&lt;h2 id=&quot;facade&quot;&gt;Facade&lt;/h2&gt;

&lt;h2 id=&quot;flyweight&quot;&gt;Flyweight&lt;/h2&gt;

&lt;h1 id=&quot;behavioral-design-pattern&quot;&gt;Behavioral Design Pattern&lt;/h1&gt;

&lt;p&gt;There are eleven of them, to memorise, remember &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Double MISC + VOT&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;mediator&quot;&gt;Mediator&lt;/h2&gt;

&lt;h2 id=&quot;memento&quot;&gt;Memento&lt;/h2&gt;

&lt;h2 id=&quot;intepretor&quot;&gt;Intepretor&lt;/h2&gt;

&lt;h2 id=&quot;iterator&quot;&gt;Iterator&lt;/h2&gt;

&lt;h2 id=&quot;strategy&quot;&gt;Strategy&lt;/h2&gt;

&lt;h2 id=&quot;state&quot;&gt;State&lt;/h2&gt;

&lt;h2 id=&quot;chain-of-responsibility&quot;&gt;Chain of Responsibility&lt;/h2&gt;

&lt;h2 id=&quot;command&quot;&gt;Command&lt;/h2&gt;

&lt;h2 id=&quot;visitor&quot;&gt;Visitor&lt;/h2&gt;

&lt;h2 id=&quot;observer&quot;&gt;Observer&lt;/h2&gt;

&lt;h2 id=&quot;template-methods&quot;&gt;Template Methods&lt;/h2&gt;</content><author><name>Xiang Chen</name></author><summary type="html">Work In Progress</summary></entry><entry><title type="html">No Boundaries</title><link href="https://chenxiangtech.github.io/No-boundaries/" rel="alternate" type="text/html" title="No Boundaries" /><published>2020-07-21T00:00:00+01:00</published><updated>2020-07-21T00:00:00+01:00</updated><id>https://chenxiangtech.github.io/No-boundaries</id><content type="html" xml:base="https://chenxiangtech.github.io/No-boundaries/">&lt;p&gt;I recently was updating my Linkedin profile, and therefore received several phone calls from some recruiters.&lt;/p&gt;

&lt;p&gt;It’s good to be in conversations where people are showing interest in you, and it all went like breeze.&lt;/p&gt;

&lt;p&gt;There was one particular question that I didn’t think too much at the time, but echo in my mind after and I’d like to share some thoughts on it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recruiter: Are you front end or back end?&lt;/p&gt;

  &lt;p&gt;Me: (Without hesitation) I’m full stack.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This made me think not because I take pride in being full stack (at least not the only reason), but &lt;strong&gt;how quickly I accept labelling myself as XX developer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The categories system in the question has definitely evolved from ten years ago.&lt;/p&gt;

&lt;p&gt;In the current Job market if we look at the Job Description, we can see the developers have been categorized as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Frontend developers (Angular, React, Javascript, HTML, CSS)&lt;/li&gt;
  &lt;li&gt;Backend Developers (Java, Database)&lt;/li&gt;
  &lt;li&gt;Full Stack developers.&lt;/li&gt;
  &lt;li&gt;Big Data (Hadoop, spark)&lt;/li&gt;
  &lt;li&gt;Machine Learning&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As far as I recalled, in my early days of career back in 2005, the main categories were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;web designer (Dreamweavers, HTML, CSS, Photoshop)&lt;/li&gt;
  &lt;li&gt;PHP Developers&lt;/li&gt;
  &lt;li&gt;C++ Developers&lt;/li&gt;
  &lt;li&gt;Java, Jsp developers&lt;/li&gt;
  &lt;li&gt;DBAs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These categories system has been great help to the recruiters to identify the candidates.&lt;/p&gt;

&lt;p&gt;But as a techincal person, I’m bit concerned about the invisible boundary which limit my mindset when I accept it unconsciously.&lt;/p&gt;

&lt;p&gt;For example, when I say&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’m a Java developer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This implies I’m saying&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’m not a C++, C or Assembly language developer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So when I explore the source code in JVM, I tend to stop when native libary written in C surfaces.&lt;/p&gt;

&lt;p&gt;When I check the source code in Tomcat, I tend to stop when I need to check the linux implementation of connect_socket()&lt;/p&gt;

&lt;p&gt;There is an invisible boudary in my mind which limits my exploration and curiosity.&lt;/p&gt;

&lt;p&gt;And there are two striking stories I came across, which points to one wisdom in the Tech world:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There is no boundary in technical world.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The creater of Spring framework, Rod Johnson is a PhD in musicology.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The creator of Vuejs, Evan You,  majors in Art and Art History.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve been reading their stories and documentories, and these fellows have impacted the life of millions of developers, and I can’t even call them developers if I only know the education path.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This made me think if we are letting our Education Path define who we are and limit we can or we should do?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Probably my key thoughts are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t let your education background, work experience limit who you are and what you want to explore.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t use these categories as the only criteria to analysis others’ potential.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This probably perfectly callback the key essense of a scrum developer, who need to be Cross Functional.&lt;/p&gt;

&lt;p&gt;There, that’s my gentle reminder for myself today.&lt;/p&gt;</content><author><name>Xiang Chen</name></author><summary type="html">I recently was updating my Linkedin profile, and therefore received several phone calls from some recruiters.</summary></entry><entry><title type="html">Solid Principle Single Responsibility Principle</title><link href="https://chenxiangtech.github.io/SOLID-Principle-Single-Responsibility-Principle/" rel="alternate" type="text/html" title="Solid Principle   Single Responsibility Principle" /><published>2020-07-21T00:00:00+01:00</published><updated>2020-07-21T00:00:00+01:00</updated><id>https://chenxiangtech.github.io/SOLID-Principle---Single-Responsibility-Principle</id><content type="html" xml:base="https://chenxiangtech.github.io/SOLID-Principle-Single-Responsibility-Principle/">&lt;p&gt;&lt;strong&gt;Single Responsibility Principle&lt;/strong&gt; is a very easy but also confusing principle, that we may easily thought we’ve got it but actually we only did partially. We may have interpreted it as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Each Module should just do one thing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have to confess, that’s how I understood it at the beginning. There is nothing wrong with this understanding, in fact it complies with the concept of designing modules to be &lt;strong&gt;Highly Conhesive, and Loosely Coupled&lt;/strong&gt;. However, it’s hard to understand why is this principle important, and what happens if you violate it.&lt;/p&gt;

&lt;p&gt;Here comes the other definition of SRP which is popular on the internet, but doesn’t make much sense when I read it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Each module should have one, and only one, reason to change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this definition has any relationship with the word “Responsiblity”? At least for me, I don’t find a clue. So try another one:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Each module should be responsible to one, and only one, actor.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Actor is a group of users or stakeholders who requires this module, and demand changes in the same way.&lt;/p&gt;

&lt;p&gt;Now, I feel that’s much better to understand and articulate. I got this definition from Robert Martin’s book “Clean Architecture”, and I’m going to use his example in the book to illustrate this principle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example of SRP Violation:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calcuatePay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Financial Department use this function to calculate pay.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;getRegularHours&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// To calculate the pay&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reportHours&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// HR Department require this&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;getRegularHours&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// To report hours&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRegularHours&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Based on Don't Repeat Yourself principle, the method here is a shared private function&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// used by both calcuatePay() and reportHours(), starting with a simple logic, &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// say, calculate all the regular hours of regular work days.&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Now here is the tricky situation:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// What if the HR Department wants to change how this is calculated,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// while Financial Department want to stay the same?&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// In real life, this is what happens:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Developer from HR Department makes the change, and test everything with HR's signoff.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// After several days, the Financial Department discovered this change, because&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// They are overpaying millions of dollars...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// A common method to persist this record, you can say DBA requires this.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As illustrated above, if there are multiple actors depending on a module, they could be affected by one single change without even knowing it. This is an example of deeply coupled code. This makes code change or refactoring extremely risky and hard, and normally people just lose the courage to do so.&lt;/p&gt;

&lt;p&gt;The fix is to extract the function for each actor and make a module for itself. And the developer from each department only needs to change the module they are responsible, without unnecessary code conflict or risky knockon effect.&lt;/p&gt;

&lt;p&gt;I’d like to end this post with the responsibility of a good architect:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make the system easy to change and maintain.&lt;/li&gt;
  &lt;li&gt;Increase the productivity of each developer&lt;/li&gt;
  &lt;li&gt;Reduce the overall cost by achieveing the above two.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Xiang Chen</name></author><summary type="html">Single Responsibility Principle is a very easy but also confusing principle, that we may easily thought we’ve got it but actually we only did partially. We may have interpreted it as:</summary></entry><entry><title type="html">Professionalism Starts With Responsibility</title><link href="https://chenxiangtech.github.io/Professionalism-Starts-With-Responsibility/" rel="alternate" type="text/html" title="Professionalism Starts With Responsibility" /><published>2020-06-20T00:00:00+01:00</published><updated>2020-06-20T00:00:00+01:00</updated><id>https://chenxiangtech.github.io/Professionalism-Starts-With-Responsibility</id><content type="html" xml:base="https://chenxiangtech.github.io/Professionalism-Starts-With-Responsibility/">&lt;p&gt;I recently read the book “Clean Coder” from Robert C. Martin, who is also the author of “Clean Code” which someone may refer it as the bible of the programmers.&lt;/p&gt;

&lt;p&gt;To me, the experience of reading this book is quite special, I felt being taken under the wings and mentored throughout the book.&lt;/p&gt;

&lt;p&gt;The author, who is also known as Uncle Bob, has shared his 42 years experience of being a professional developer, manager, and even CEO, witnessing the things changed and the things not changed so much.&lt;/p&gt;

&lt;p&gt;He has been willing to share a lot of painful dark histories that he has been through, such as being fired, creating nasty disaster defects, completely losing work life balance etc.&lt;/p&gt;

&lt;p&gt;I’m quite grateful to being able to take the share of his wisdom, and this is driving me to also share some experience or lessons I’ve learned since I stepped into the Professional Service world five years ago.&lt;/p&gt;

&lt;p&gt;I’ve organized a BBL within my previous organization for this, and as part of it I’d like to write a blog post  and hope someone can benefit from it too.&lt;/p&gt;

&lt;p&gt;This post only covers the first chapter, and is in a format of book notes. Please get the book and find out more if you are interested.&lt;/p&gt;

&lt;h1 id=&quot;professionalism&quot;&gt;Professionalism&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Not everyone can be called professional, be careful what you ask for.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Not everyone who can put code together and make it “work” can be called professional.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;take-responsibility&quot;&gt;Take Responsibility&lt;/h2&gt;
&lt;p&gt;In this section, Uncle Bob has shared experience he had, that he once had to ship something not fully tested due to time pressure, and caused severe impact on the customer.
He only tested his new features, but didn’t fully regression test the other part of the system where he believed things should be fine. And guess what, Murphy’s law shined again.&lt;/p&gt;

&lt;p&gt;The system is done as soon as his new feature rolled out, and customers are losing tons of critical data for one day and had roll back the system. His manager was roasted on constant phone from the customer.&lt;/p&gt;

&lt;p&gt;He was not sure how long he needed to fix the error etc, and on the other end the rolled back feature is also critical, well you know the rest…&lt;/p&gt;

&lt;p&gt;He confessed that he only cared about his reputation and should have told the PM that the delivery is not fully tested and see if the date can be pushed till the tests are fully done, and that was an irresponsible behavior for the shipment quality.&lt;/p&gt;

&lt;p&gt;I totally have been in the same scenarios,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Just commit it, we can make it pretty later!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The tests failed, but it’s not related to my changes, can we merged it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let’s just develop it and test the happy path, QA can test and let us know if any issue later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s quite tempted for developers to take shortcut to a workable software, and skip certain tedious steps, such as testing, documentation, I have to confess I’m one of them.&lt;/p&gt;

&lt;p&gt;As a client facing consultant we’ll always face even more pressure from the project, customer, so the temptation is huge and this won’t be easy, and who said this will be easy?&lt;/p&gt;

&lt;p&gt;There are probably related topics jumping in our head to aid this kind of issues, like Definition of Done, Acceptance Criteria etc, but these are process related and can be passively enforced onto an individual.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here we are trying to talk about people.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As per the first value of Agile Manifesto, that &lt;strong&gt;People over Process and Tools&lt;/strong&gt;, that without People having the right mindset, the process can be tilted when facing difficulties.&lt;/p&gt;

&lt;p&gt;So as a professional, the mindset should be to extend our responsibility to a higher level, e.g.:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Responsible to the function –     make it work (probably too obvious);&lt;/li&gt;
  &lt;li&gt;Responsible to the developers     who is going to maintain our code – easy to read, change and upgrade;&lt;/li&gt;
  &lt;li&gt;Responsible to the QA who is     going to test our code - well unit tested, behavior tested, documented and     communicated;&lt;/li&gt;
  &lt;li&gt;Responsible to the Build     Engineer who is going to deploy your code – design our code easy to be     deployed, loosely coupled components, avoid unnecessary deployment by     making the feature configurable;&lt;/li&gt;
  &lt;li&gt;Responsible to the Sustaining     Engineer who is going to jump on Midnight calls if our code causes     defects;&lt;/li&gt;
  &lt;li&gt;Responsible to the End User     who is going to use our code – Bear in mind this feature could be a big     impact to a lot of people’s daily life;&lt;/li&gt;
  &lt;li&gt;Responsible to the Customer     who is trying to be profitable with our code – Don’t make them lose     business because of service unavailable or defects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this world which has been broadly digitallized, every thing we touch day to day are constructed by lines of codes. This can be your bills, your car, your hospital device etc. We are the developers behind these code, we put if/else statements in this mission critical functions. The sense of responsibility is a minimum ask for us.&lt;/p&gt;</content><author><name>Xiang Chen</name></author><summary type="html">I recently read the book “Clean Coder” from Robert C. Martin, who is also the author of “Clean Code” which someone may refer it as the bible of the programmers.</summary></entry></feed>